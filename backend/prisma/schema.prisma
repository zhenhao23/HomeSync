datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int           @id @default(autoincrement())
  firebaseUid  String?   @unique  // Add this line
  email            String        @unique
  passwordHash      String
  role             String
  firstName        String
  lastName         String
  profilePictureUrl String?
  twoFactorEnabled Boolean       @default(false)
  createdAt        DateTime      @default(now())
  // Relations
  ownedHomes       SmartHome[]   @relation("HomeOwner")
  homeDwellers     HomeDweller[]
}

model SmartHome {
  id             Int                 @id @default(autoincrement())
  homeownerId    Int
  invitationCode String             @unique
  name           String
  energyLimit    Decimal            @default(11000) // Default energy limit in kWh
  createdAt      DateTime           @default(now())
  // Relations
  owner          User               @relation("HomeOwner", fields: [homeownerId], references: [id])
  dwellers       HomeDweller[]
  rooms          Room[]
  solarMetrics   SolarEnergyMetric[]
  solarDetails   SolarEnergyDetail[]
}

model HomeDweller {
  id              Int       @id @default(autoincrement())
  userId          Int
  homeId          Int
  permissionLevel String
  status          String
  addedAt         DateTime  @default(now())
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  home            SmartHome @relation(fields: [homeId], references: [id])
}

model Room {
  id        Int       @id @default(autoincrement())
  homeId    Int
  name      String
  iconType  String
  createdAt DateTime  @default(now())
  // Relations
  home      SmartHome @relation(fields: [homeId], references: [id])
  devices   Device[]
}

model Device {
  id           Int                     @id @default(autoincrement())
  roomId       Int
  displayName  String
  type         String
  status       Boolean                 @default(false) // Changed from String to Boolean
  iconType     String
  isFavorite   Boolean                 @default(false)
  swiped       Boolean                 @default(false) // New column
  addedAt      DateTime                @default(now())
  // Relations
  room         Room                    @relation(fields: [roomId], references: [id])
  controls     DeviceControl[]
  triggers     DeviceTrigger[]
  energyLogs   EnergyConsumptionLog[]
  energyBreakdowns EnergyDeviceBreakdown[]
}

model DeviceControl {
  id           Int      @id @default(autoincrement())
  deviceId     Int
  controlType  String
  currentValue Decimal
  minValue     Decimal
  maxValue     Decimal
  // Relations
  device       Device   @relation(fields: [deviceId], references: [id])
}

model DeviceTrigger {
  id                Int      @id @default(autoincrement())
  deviceId          Int
  triggerType       String
  conditionOperator String
  isActive          Boolean  @default(true)
  featurePeriod     String   @default("Daily") // New column
  featureDetail     String   @default("8:00am, 12:00pm, 7:00pm") // New column
  // Relations
  device            Device   @relation(fields: [deviceId], references: [id])
}

model EnergyDeviceBreakdown {
  id          Int      @id @default(autoincrement())
  deviceId    Int
  energyUsed  Decimal
  activeHours Decimal  // Add this field to track hours device was active
  timestamp   DateTime @default(now())
  // Relations
  device      Device   @relation(fields: [deviceId], references: [id])
}

model EnergyConsumptionLog {
  id             Int       @id @default(autoincrement())
  deviceId       Int
  actionType     String    // e.g., "turned_on", "turned_off", "idle", "active"
  actionDetails  String?   // Additional context about the action
  timestamp      DateTime
  // Relations
  device         Device    @relation(fields: [deviceId], references: [id])
}

model SolarEnergyMetric {
  id                  Int       @id @default(autoincrement())
  homeId             Int
  batteryLevel       Decimal
  equivalentTrees    Int
  co2EmissionsSaved  Decimal
  standardCoalSaved  Decimal
  timeframe          String
  recordedDate       DateTime
  // Relations
  home               SmartHome @relation(fields: [homeId], references: [id])
}

model SolarEnergyDetail {
  id              Int       @id @default(autoincrement())
  homeId          Int
  pvGeneration    Decimal
  importedEnergy  Decimal
  exportedEnergy  Decimal
  loadEnergy      Decimal
  timeframe       String
  recordedDate    DateTime
  // Relations
  home            SmartHome @relation(fields: [homeId], references: [id])
}